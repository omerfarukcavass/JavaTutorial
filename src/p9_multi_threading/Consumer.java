package p9_multi_threading;

import java.util.List;

public class Consumer implements Runnable {

	List<Integer> questionList = null;

	public Consumer(List<Integer> questionList) {
		this.questionList = questionList;
	}

	public void answerQuestion() throws InterruptedException {

		/*
		 * If there is no question in list, consumer thread will wait for new questions
		 * until a new question is generated by producer. Then consumer thread will be
		 * notified by producer that new question is generatod. 
		 * 
		 */

		synchronized (questionList) {

			while (questionList.isEmpty()) {
				System.out.println("No question.Waiting for new questions..");
				questionList.wait();
			}

		}

		/*
		 * If there is any question in the list, consumer will answer and notify the
		 * producer thread that you can generate new questions if you are waiting. Note
		 * that it may be the case that producer doesn't wait for answers (the list is
		 * not full yet), we notify anyway.
		 */

		synchronized (questionList) {
			Thread.sleep(1000); // to make it realistic
			System.out.println("Question answered: " + questionList.remove(0));
			questionList.notify();
		}

	}

	@Override
	public void run() {

		while (true) {
			try {
				answerQuestion();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}

}
